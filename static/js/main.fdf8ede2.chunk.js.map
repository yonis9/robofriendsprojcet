{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","hide_scrollbar_react_es","style","borderTop","borderBottom","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","filterRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_ErrorBoundry","components_Scroll","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fdf8ede2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n\t\t<img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t</div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn (<Card \r\n\t\t\t\tkey ={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/>)\r\n\t\t\t}) }\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b-- green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange= {searchChange}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport Scrollable from 'hide-scrollbar-react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<Scrollable style= {{borderTop: '5px double black', borderBottom: '5px double black'}}>\r\n\t\t<div style= {{height: '70vh'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t</Scrollable>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good.</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: ()=> dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor() {\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: [],\r\n\t// \t\tsearchfield: ''\r\n\t// \t}\r\n\t// }\r\n\r\n\tcomponentDidMount() {\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// \t.then(response=>  response.json())\r\n\t\t// \t.then(users => this.setState({robots : users}));\r\n\r\n\t\tthis.props.onRequestRobots();\r\n\t\t\r\n\t}\r\n\r\n\t// onSearchChange = (event) => {\r\n\t// \tthis.setState({searchfield: event.target.value})\r\n\t// }\r\n\r\n\trender() {\r\n\t\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\t\tconst filterRobots =robots.filter(robot => {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t}) \r\n\r\n\t\treturn isPending ?\r\n\t\t <h1>Loading</h1> :\r\n \t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filterRobots} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>  response.json())\r\n\t.then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger  } from 'redux-logger';\nimport  thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport App from './containers/App';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}